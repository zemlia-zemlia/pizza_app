# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(unique=True, max_length=80)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)
    name = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class DjangoAdminLog(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey('PizzaAuthAppCustomuser', models.DO_NOTHING)
    action_time = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class PizzaAppAddress(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    full = models.CharField(max_length=150)

    class Meta:
        managed = False
        db_table = 'pizza_app_address'


class PizzaAppPizzaingredient(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(max_length=50)

    class Meta:
        managed = False
        db_table = 'pizza_app_pizzaingredient'


class PizzaAppPizzamenuitem(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(max_length=50)

    class Meta:
        managed = False
        db_table = 'pizza_app_pizzamenuitem'


class PizzaAppPizzamenuitemIngredients(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    pizzamenuitem = models.ForeignKey(PizzaAppPizzamenuitem, models.DO_NOTHING)
    pizzaingredient = models.ForeignKey(PizzaAppPizzaingredient, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'pizza_app_pizzamenuitem_ingredients'
        unique_together = (('pizzamenuitem', 'pizzaingredient'),)


class PizzaAppPizzaorder(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    comment = models.CharField(max_length=140)
    delivered = models.BooleanField()
    date_created = models.DateTimeField()
    date_delivered = models.DateTimeField(blank=True, null=True)
    delivery = models.ForeignKey(PizzaAppAddress, models.DO_NOTHING)
    kind = models.ForeignKey(PizzaAppPizzamenuitem, models.DO_NOTHING)
    size = models.ForeignKey('PizzaAppPizzasize', models.DO_NOTHING)
    user = models.ForeignKey('PizzaAuthAppCustomuser', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pizza_app_pizzaorder'


class PizzaAppPizzaorderExclude(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    pizzaorder = models.ForeignKey(PizzaAppPizzaorder, models.DO_NOTHING)
    pizzaingredient = models.ForeignKey(PizzaAppPizzaingredient, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'pizza_app_pizzaorder_exclude'
        unique_together = (('pizzaorder', 'pizzaingredient'),)


class PizzaAppPizzaorderExtra(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    pizzaorder = models.ForeignKey(PizzaAppPizzaorder, models.DO_NOTHING)
    pizzaingredient = models.ForeignKey(PizzaAppPizzaingredient, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'pizza_app_pizzaorder_extra'
        unique_together = (('pizzaorder', 'pizzaingredient'),)


class PizzaAppPizzasize(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    size = models.CharField(max_length=2)

    class Meta:
        managed = False
        db_table = 'pizza_app_pizzasize'


class PizzaAuthAppCustomuser(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    our_note = models.CharField(max_length=140)
    favourite_pizza = models.ForeignKey(PizzaAppPizzamenuitem, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'pizza_auth_app_customuser'


class PizzaAuthAppCustomuserGroups(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    customuser = models.ForeignKey(PizzaAuthAppCustomuser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'pizza_auth_app_customuser_groups'
        unique_together = (('customuser', 'group'),)


class PizzaAuthAppCustomuserUserPermissions(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    customuser = models.ForeignKey(PizzaAuthAppCustomuser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'pizza_auth_app_customuser_user_permissions'
        unique_together = (('customuser', 'permission'),)
